// Generated by CoffeeScript 1.6.2
/*
 jQuery Waypoints - v2.0.3
 Copyright (c) 2011-2013 Caleb Troughton
 Dual licensed under the MIT license and GPL license.
 https://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt
*/
(function () {
    var indexOf = [].indexOf || function (item) {
        for (var i = 0, len = this.length; i < len; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    },
        slice = [].slice;

    (function (root, factory) {
        if (typeof define === "function" && define.amd) {
            return define(["jquery"], function ($) {
                return factory($, root);
            });
        } else {
            return factory(root.jQuery, root);
        }
    })(this, function ($, window) {
        var $window, Context, Waypoint, contextCounter, contexts, eventNames, waypoints, waypointCounter;

        $window = $(window);
        contextCounter = 1;
        waypointCounter = 1;
        contexts = {};
        waypoints = {};

        eventNames = {
            resize: "resize.waypoints",
            scroll: "scroll.waypoints",
        };

        // Context Constructor
        Context = function ($element) {
            this.$element = $element;
            this.element = $element[0];
            this.didResize = false;
            this.didScroll = false;
            this.id = "context" + contextCounter++;
            this.oldScroll = {
                x: $element.scrollLeft(),
                y: $element.scrollTop(),
            };
            this.waypoints = {
                horizontal: {},
                vertical: {},
            };
            $element.data("waypoints-context-id", this.id);
            contexts[this.id] = this;

            // Event Bindings
            $element.on(eventNames.scroll, (function (_this) {
                return function () {
                    if (!_this.didScroll) {
                        _this.didScroll = true;
                        window.setTimeout(function () {
                            _this.doScroll();
                            _this.didScroll = false;
                        }, $.waypoints.settings.scrollThrottle);
                    }
                };
            })(this));

            $element.on(eventNames.resize, (function (_this) {
                return function () {
                    if (!_this.didResize) {
                        _this.didResize = true;
                        window.setTimeout(function () {
                            $.waypoints("refresh");
                            _this.didResize = false;
                        }, $.waypoints.settings.resizeThrottle);
                    }
                };
            })(this));
        };

        Context.prototype.doScroll = function () {
            var axes = {
                horizontal: { newScroll: this.$element.scrollLeft(), oldScroll: this.oldScroll.x },
                vertical: { newScroll: this.$element.scrollTop(), oldScroll: this.oldScroll.y },
            };

            for (var key in axes) {
                var scroll = axes[key];
                var triggerWaypoints = [];

                $.each(this.waypoints[key], function (id, waypoint) {
                    var direction;
                    if (scroll.oldScroll < waypoint.offset && waypoint.offset <= scroll.newScroll) {
                        direction = scroll.newScroll > scroll.oldScroll ? "forward" : "backward";
                        triggerWaypoints.push({ waypoint: waypoint, direction: direction });
                    }
                });

                triggerWaypoints.forEach(function (trigger) {
                    trigger.waypoint.trigger([trigger.direction]);
                });
            }

            this.oldScroll = { x: axes.horizontal.newScroll, y: axes.vertical.newScroll };
        };

        // Waypoint Constructor
        Waypoint = function ($element, context, options) {
            options = $.extend({}, $.fn.waypoint.defaults, options);
            this.$element = $element;
            this.axis = options.horizontal ? "horizontal" : "vertical";
            this.callback = options.handler;
            this.context = context;
            this.id = "waypoint" + waypointCounter++;
            this.offset = options.offset || 0;

            context.waypoints[this.axis][this.id] = this;
            waypoints[this.id] = this;
        };

        Waypoint.prototype.trigger = function (args) {
            if (this.callback) this.callback.apply(this.element, args);
        };

        $.waypoints = function (method) {
            if (Context.prototype[method]) {
                return Context.prototype[method].apply(this, slice.call(arguments, 1));
            }
        };

        $.waypoints.settings = { scrollThrottle: 100, resizeThrottle: 100 };

        $(window).on("load", function () {
            $.waypoints("refresh");
        });

        return Waypoint;
    });
}).call(this);
